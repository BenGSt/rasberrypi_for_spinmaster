[global_tags]
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0.2s"
  flush_interval = "1s"
  flush_jitter = "0.2s"
  precision = ""
  hostname = ""
  omit_hostname = false
[[outputs.influxdb]]
  urls = ["http://localhost:8086"]
  database = "home"
  username = "grafana"
  password = ""
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
[[inputs.mem]]
[[inputs.swap]]
[[inputs.file]]
  files = ["/sys/class/thermal/thermal_zone0/temp"]
  name_override = "cpu_temperature"
  data_format = "value"
  data_type = "integer"
[[inputs.exec]]
  commands = ["vcgencmd measure_temp"]
  name_override = "gpu_temperature"
  data_format = "grok"
  grok_patterns = ["%{NUMBER:value:float}"]
[[inputs.net]]
  interfaces = ["wlan0"]
[[inputs.netstat]]
[[inputs.ping]]
  urls = ["www.google.com"] # required
  count = 4
  interface = "wlan0"
  name_override = "google_ping"
#[[inputs.docker]]
#  endpoint = "unix:///var/run/docker.sock"
[[inputs.dns_query]]
  servers = ["8.8.8.8"]
  domains = ["."]
  record_type = "A"
  timeout = 10
  name_override = "google_dns"
[[inputs.kernel]]
[[inputs.system]]
[[inputs.processes]]
[[inputs.diskio]]






#######################################
###########SPIN_MASTER_DATA############
#######################################
#NOTE BY BEN 19.12.21: Need to check how to use more than one file, exec,etc as above. ALSO - seprate database, config file for each dashboard? 


[[inputs.file]]
  files = ["/sys/bus/w1/devices/28-c1ac271e64ff/temperature"]
  name_override = "digi_temp_sensor_0"
  data_format = "value"
  data_type = "integer"

# [[inputs.exec]]
#   commands = ["cat /sys/bus/w1/devices/28-c1ac271e64ff/temperature | sed 's/\([0-9][0-9]\)\(.*\)/\1\.\2/'"]
#   name_override = "exe_digi_temp_sensor_0"
#   data_format = "grok"
#   grok_patterns = ["%{NUMBER:value:float}"]

#[agent]
[[outputs.http]]
  url = "http://192.168.43.25:3000/api/live/push/custom_stream_id"	
  data_format = "influx"
  [outputs.http.headers]
    authorization = "Bearer eyJrIjoicktobHNHVVRpM1NzbFM5dU5jY1hWS1hOZmVhTFdCdUUiLCJuIjoiQiIsImlkIjoxfQ=="

# Stream a log file, like the tail -f command
[[inputs.tail]]
  interval = "1s"  
  flush_interval = "1s"
  metric_batch_size = 3

  
  ## files to tail.
  ## These accept standard unix glob matching rules, but with the addition of
  ## ** as a "super asterisk". ie:
  ##   "/var/log/**.log"  -> recursively find all .log files in /var/log
  ##   "/var/log/*/*.log" -> find all .log files with a parent dir in /var/log
  ##   "/var/log/apache.log" -> just tail the apache log file
  ##
  ## See https://github.com/gobwas/glob for more examples
  ##
  files = ["/home/pi/thermistor_adc/thermistor_0.log"]
  ## Read file from beginning.
  from_beginning = false
  ## Whether file is a named pipe
  pipe = true

  ## Method used to watch for file updates.  Can be either "inotify" or "poll".
  # watch_method = "inotify"

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "grok"
  grok_patterns = ["%{NUMBER:value:float}"]

  name_override = "thermistor_0_voltage"


