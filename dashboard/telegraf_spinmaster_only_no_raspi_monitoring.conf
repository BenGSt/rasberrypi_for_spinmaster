[global_tags]

[agent]
  interval = "2.5s"
  round_interval = true
  metric_batch_size = 100
  metric_buffer_limit = 1000
  collection_jitter = "0.2s"
  flush_interval = "2s"
  flush_jitter = "0.2s"
  precision = ""
  hostname = ""
  omit_hostname = false
[[outputs.influxdb]]
  urls = ["http://localhost:8086"]
  database = "home"
  username = "grafana"
  password = ""

#######################################
###########SPIN_MASTER_DATA############
#######################################
#NOTE BY BEN 19.12.21: Need to check how to use more than one file, exec,etc as above. ALSO - seprate database, config file for each dashboard?

# digital temperature sensors
# [[inputs.file]]
#   files = ["/sys/bus/w1/devices/28-6195591e64ff/temperature"]
#   name_override = "digi_temp_sensor_0"
#   data_format = "value"
#   data_type = "integer"
#
# [[inputs.file]]
#   files = ["/sys/bus/w1/devices/28-5faa271e64ff/temperature"]
#   name_override = "digi_temp_sensor_1"
#   data_format = "value"
#   data_type = "integer"

#TODO: it would be nice to use a generic command to read the sensors without knowing the unique addresses (e.g. 28-5faa271e64ff)
#   sometginh like :   i=0; for sensor in `realpath  /sys/bus/w1/devices/28*/temperature`; do echo Tc_digital_temp_sensor_$i `cat $sensor| sed 's/\([0-9][0-9]\)\(.*\)/\1\.\2/'`; i=$((i+1)); done


#dosn't work
# [[inputs.exec]]
#   commands = ["cat /sys/bus/w1/devices/28-6195591e64ff/temperature | sed 's/\([0-9][0-9]\)\(.*\)/\1\.\2/'"]
#   name_override = "exe_digi_temp_sensor_0"
#   data_format = "grok"
#   grok_patterns = ["%{NUMBER:value:float}"]

#thermistors
[[inputs.exec]]
  commands = ["python3 /home/pi/raspberrypi_for_SpinMaster/sensors/thermistor_adc/read_thermistors.py "]
  name_override = "exe_thermistors_logfmt"
  data_format = "logfmt"
#  data_type = "float"


#[agent]
#[[outputs.http]]
#  url = "http://192.168.43.25:3000/api/live/push/custom_stream_id"
#  data_format = "influx"
#  [outputs.http.headers]
#    authorization = "Bearer eyJrIjoicktobHNHVVRpM1NzbFM5dU5jY1hWS1hOZmVhTFdCdUUiLCJuIjoiQiIsImlkIjoxfQ=="

# Stream a log file, like the tail -f command
#[[inputs.tail]]
#  interval = "1s"
#  flush_interval = "1s"
#  metric_batch_size = 3


  ## files to tail.
  ## These accept standard unix glob matching rules, but with the addition of
  ## ** as a "super asterisk". ie:
  ##   "/var/log/**.log"  -> recursively find all .log files in /var/log
  ##   "/var/log/*/*.log" -> find all .log files with a parent dir in /var/log
  ##   "/var/log/apache.log" -> just tail the apache log file
  ##
  ## See https://github.com/gobwas/glob for more examples
  ##
#  files = ["/home/pi/thermistor_adc/thermistor_0.log"]
  ## Read file from beginning.
#  from_beginning = false
  ## Whether file is a named pipe
#  pipe = true

  ## Method used to watch for file updates.  Can be either "inotify" or "poll".
  # watch_method = "inotify"

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:value:float}"]

#  name_override = "thermistor_0_voltage"
